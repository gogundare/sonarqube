apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
spec:
  strategy:
    rollingUpdate:
      maxUnavailable: 100%
      maxSurge: 100%
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: sonar.jdbc.url
              value: "jdbc:postgresql://postgres:5432/{{ .Values.global.databaseName }}"
            - name: sonar.jdbc.username
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.secretName }}
                  key: user
            - name: sonar.jdbc.password
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.secretName }}
                  key: password
            - name: sonar.web.context
              value: "/{{ .Chart.Name }}"
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          volumeMounts:
            - name: {{ .Chart.Name }}
              mountPath: /opt/sonarqube/data
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: {{ .Chart.Name }}
          persistentVolumeClaim:
            claimName: {{ .Chart.Name }}-de